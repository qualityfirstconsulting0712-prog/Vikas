import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { motion } from "framer-motion";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  ReferenceDot,
} from "recharts";

type Row = {
  year: number;
  monthly: number;
  annual: number;
  cumulative: number;
};

export default function SalaryProjection() {
  const [startMonthly, setStartMonthly] = useState(43333);
  const [startYear, setStartYear] = useState(2025);
  const [hikePercent, setHikePercent] = useState(12);
  const [numYears, setNumYears] = useState(20);
  const [rows, setRows] = useState<Row[]>([]);
  const [total, setTotal] = useState(0);

  // chart toggles
  const [showAnnual, setShowAnnual] = useState(true);
  const [showCumulative, setShowCumulative] = useState(true);

  // currency display
  const [unit, setUnit] = useState<"INR" | "Lakh" | "Crore">("INR");

  useEffect(() => {
    generateTable();
  }, [startMonthly, startYear, hikePercent, numYears]);

  const generateTable = () => {
    let monthly = startMonthly;
    let data: Row[] = [];
    let totalEarnings = 0;

    for (let i = 0; i < numYears; i++) {
      const year = startYear + i;
      const annual = monthly * 12;
      totalEarnings += annual;
      data.push({ year, monthly, annual, cumulative: totalEarnings });
      monthly = monthly * (1 + hikePercent / 100);
    }

    setRows(data);
    setTotal(totalEarnings);
  };

  const downloadCSV = () => {
    const csvRows = [
      ["Year", "Monthly CTC", "Annual CTC", "Cumulative CTC"],
      ...rows.map((r) => [
        r.year,
        r.monthly.toFixed(2),
        r.annual.toFixed(2),
        r.cumulative.toFixed(2),
      ]),
    ];
    const csv = csvRows.map((r) => r.join(",")).join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `salary_projection_${startYear}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  // formatting currency with unit selection
  const formatValue = (val: number) => {
    if (unit === "Lakh") return (val / 100000).toFixed(2) + " L";
    if (unit === "Crore") return (val / 10000000).toFixed(2) + " Cr";
    return "‚Çπ " + Math.round(val).toLocaleString("en-IN");
  };

  // highlight peak points
  const peakAnnual = rows.reduce(
    (max, r) => (r.annual > max.annual ? r : max),
    { year: 0, annual: 0, monthly: 0, cumulative: 0 }
  );
  const peakCumulative = rows[rows.length - 1]; // last year always highest cumulative

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <Card className="p-6 shadow-md">
        <h1 className="text-2xl font-bold mb-6 text-center">
          üíº Salary Projection Planner
        </h1>

        {/* Inputs */}
        <div className="grid md:grid-cols-5 gap-4 mb-6">
          <div>
            <Label>Start Monthly CTC (‚Çπ)</Label>
            <Input
              type="number"
              value={startMonthly}
              onChange={(e) => setStartMonthly(Number(e.target.value))}
            />
          </div>
          <div>
            <Label>Start Year</Label>
            <Input
              type="number"
              value={startYear}
              onChange={(e) => setStartYear(Number(e.target.value))}
            />
          </div>
          <div>
            <Label>Annual Hike (%)</Label>
            <Input
              type="number"
              value={hikePercent}
              onChange={(e) => setHikePercent(Number(e.target.value))}
            />
          </div>
          <div>
            <Label>Years</Label>
            <Input
              type="number"
              value={numYears}
              onChange={(e) => setNumYears(Number(e.target.value))}
            />
          </div>
          <div>
            <Label>Currency Unit</Label>
            <select
              className="border rounded p-2 w-full"
              value={unit}
              onChange={(e) =>
                setUnit(e.target.value as "INR" | "Lakh" | "Crore")
              }
            >
              <option value="INR">‚Çπ (Default)</option>
              <option value="Lakh">Lakh</option>
              <option value="Crore">Crore</option>
            </select>
          </div>
        </div>

        {/* Buttons */}
        <div className="flex gap-4 mb-6">
          <Button onClick={generateTable}>üîÑ Generate</Button>
          <Button variant="outline" onClick={downloadCSV}>
            ‚¨áÔ∏è Download CSV
          </Button>
        </div>

        {/* Toggles */}
        <div className="flex gap-6 mb-6">
          <label className="flex items-center gap-2">
            <Checkbox checked={showAnnual} onCheckedChange={(v) => setShowAnnual(!!v)} /> Show Annual
          </label>
          <label className="flex items-center gap-2">
            <Checkbox checked={showCumulative} onCheckedChange={(v) => setShowCumulative(!!v)} /> Show Cumulative
          </label>
        </div>

        {/* Total Earnings */}
        <p className="text-sm text-gray-600 mb-6">
          Total earnings over {numYears} years:{" "}
          <strong>{formatValue(total)}</strong>
        </p>

        {/* Table */}
        <div className="overflow-auto max-h-[50vh] mb-10 border rounded">
          <table className="w-full border-collapse">
            <thead className="bg-gray-50 dark:bg-gray-800 sticky top-0">
              <tr>
                <th className="text-left p-2">Year</th>
                <th className="text-right p-2">Monthly CTC</th>
                <th className="text-right p-2">Annual CTC</th>
                <th className="text-right p-2">Cumulative CTC</th>
              </tr>
            </thead>
            <tbody>
              {rows.map((r, i) => (
                <motion.tr
                  key={r.year}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: i * 0.01 }}
                  className="border-b"
                >
                  <td className="p-2">{r.year}</td>
                  <td className="p-2 text-right">{formatValue(r.monthly)}</td>
                  <td className="p-2 text-right">{formatValue(r.annual)}</td>
                  <td className="p-2 text-right">{formatValue(r.cumulative)}</td>
                </motion.tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Chart */}
        <CardContent>
          <h2 className="text-lg font-semibold mb-4 text-center">
            üìä Salary Growth Over Time
          </h2>
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={rows}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="year" />
              <YAxis />
              <Tooltip formatter={(val: number) => formatValue(val)} />
              <Legend />

              {showAnnual && (
                <Line
                  type="monotone"
                  dataKey="annual"
                  stroke="#4f46e5"
                  strokeWidth={2}
                  name="Annual CTC"
                  dot={false}
                />
              )}
              {showCumulative && (
                <Line
                  type="monotone"
                  dataKey="cumulative"
                  stroke="#16a34a"
                  strokeWidth={2}
                  name="Cumulative Earnings"
                  dot={false}
                />
              )}

              {/* highlight peak annual */}
              {showAnnual && peakAnnual.year > 0 && (
                <ReferenceDot
                  x={peakAnnual.year}
                  y={peakAnnual.annual}
                  r={6}
                  fill="#4f46e5"
                  stroke="white"
                  label="Peak Annual"
                />
              )}

              {/* highlight final cumulative */}
              {showCumulative && (
                <ReferenceDot
                  x={peakCumulative.year}
                  y={peakCumulative.cumulative}
                  r={6}
                  fill="#16a34a"
                  stroke="white"
                  label="Total"
                />
              )}
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </div>
  );
}
